-- Popular Destinations Table for Autocomplete
-- This table stores popular tourist destinations, cities, and attractions
-- Data will be populated by external pipeline from Nominatim

-- 1. Create popular_destinations table
CREATE TABLE IF NOT EXISTS popular_destinations (
  id bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  place_id bigint NOT NULL UNIQUE, -- Nominatim place_id
  name text NOT NULL,
  display_name text NOT NULL,
  category text NOT NULL, -- tourism, place, etc.
  type text NOT NULL, -- attraction, city, island, etc.
  country text,
  region text,
  city text,
  lat decimal(10, 8) NOT NULL,
  lon decimal(11, 8) NOT NULL,
  importance decimal(10, 9) NOT NULL,
  place_rank integer NOT NULL,
  boundingbox text[], -- [min_lat, max_lat, min_lon, max_lon]
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now()
);

-- 2. Create indexes for efficient searching
CREATE INDEX IF NOT EXISTS idx_popular_destinations_name ON popular_destinations USING gin(to_tsvector('english', name));
CREATE INDEX IF NOT EXISTS idx_popular_destinations_display_name ON popular_destinations USING gin(to_tsvector('english', display_name));
CREATE INDEX IF NOT EXISTS idx_popular_destinations_category ON popular_destinations(category);
CREATE INDEX IF NOT EXISTS idx_popular_destinations_type ON popular_destinations(type);
CREATE INDEX IF NOT EXISTS idx_popular_destinations_country ON popular_destinations(country);
CREATE INDEX IF NOT EXISTS idx_popular_destinations_importance ON popular_destinations(importance DESC);
CREATE INDEX IF NOT EXISTS idx_popular_destinations_place_rank ON popular_destinations(place_rank);

-- 3. Enable Row Level Security
ALTER TABLE popular_destinations ENABLE ROW LEVEL SECURITY;

-- 4. Create RLS policies (consistent with your other tables)
CREATE POLICY "Allow all users to view popular destinations" ON popular_destinations
  FOR SELECT USING (true);

-- 5. Create function to update updated_at timestamp (if it doesn't exist)
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = now();
    RETURN NEW;
END;
$$ language 'plpgsql';

-- 6. Create trigger to automatically update updated_at
DROP TRIGGER IF EXISTS update_popular_destinations_updated_at ON popular_destinations;
CREATE TRIGGER update_popular_destinations_updated_at 
  BEFORE UPDATE ON popular_destinations 
  FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- 7. Insert sample data for testing (you can replace this with your pipeline data)
INSERT INTO popular_destinations (
  place_id, name, display_name, category, type, country, region, city, 
  lat, lon, importance, place_rank, boundingbox
) VALUES 
  (238016130, 'Angkor Wat', 'Angkor Wat, Siem Reap, Cambodia', 'tourism', 'attraction', 'Cambodia', 'Siem Reap', 'Siem Reap', 13.4124426, 103.8665873, 0.557888037798644, 30, ARRAY['13.4083770', '13.4165641', '103.8614147', '103.8717328']),
  (123456789, 'Taj Mahal', 'Taj Mahal, Agra, Uttar Pradesh, India', 'tourism', 'attraction', 'India', 'Uttar Pradesh', 'Agra', 27.1751448, 78.0399535, 0.789123456789012, 25, ARRAY['27.1740000', '27.1760000', '78.0380000', '78.0410000']),
  (987654321, 'Paris', 'Paris, Île-de-France, France', 'place', 'city', 'France', 'Île-de-France', 'Paris', 48.856614, 2.352222, 0.987654321098765, 10, ARRAY['48.8000000', '48.9000000', '2.3000000', '2.4000000']),
  (456789123, 'Bali', 'Bali, Indonesia', 'place', 'island', 'Indonesia', 'Bali', 'Denpasar', -8.3405389, 115.0919509, 0.876543210987654, 15, ARRAY['-8.8000000', '-8.0000000', '114.5000000', '115.5000000']),
  (789123456, 'Yellowstone National Park', 'Yellowstone National Park, Wyoming, United States', 'tourism', 'attraction', 'United States', 'Wyoming', 'Jackson', 44.4280, -110.5885, 0.765432109876543, 20, ARRAY['44.0000000', '45.0000000', '-111.0000000', '-110.0000000'])
ON CONFLICT (place_id) DO NOTHING;
