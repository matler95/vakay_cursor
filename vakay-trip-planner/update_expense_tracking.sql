-- Update Expense Tracking Schema
-- This script modifies the existing budget tracking to expense tracking with enhanced features

-- 1. DROP BUDGET FUNCTIONALITY
-- Remove budget-related tables as they're no longer needed
DROP TABLE IF EXISTS budgets CASCADE;

-- 2. ADD MAIN CURRENCY TO TRIPS
-- Add main_currency field to trips table for currency conversion
ALTER TABLE trips 
ADD COLUMN IF NOT EXISTS main_currency text DEFAULT 'USD';

-- 3. MODIFY EXPENSES TABLE
-- Remove date field and add new required fields
ALTER TABLE expenses 
DROP COLUMN IF EXISTS date CASCADE;

ALTER TABLE expenses 
ADD COLUMN IF NOT EXISTS payment_status text DEFAULT 'pending' CHECK (payment_status IN ('pending', 'paid'));

ALTER TABLE expenses 
ADD COLUMN IF NOT EXISTS original_currency text DEFAULT 'USD';

ALTER TABLE expenses 
ADD COLUMN IF NOT EXISTS original_amount decimal(10,2);

ALTER TABLE expenses 
ADD COLUMN IF NOT EXISTS exchange_rate decimal(10,6) DEFAULT 1.000000;

-- Update existing expenses to have original currency and amount
UPDATE expenses 
SET original_currency = currency,
    original_amount = amount,
    exchange_rate = 1.000000
WHERE original_currency IS NULL;

-- Make original_amount required after updating existing data
ALTER TABLE expenses 
ALTER COLUMN original_amount SET NOT NULL;

-- 4. CREATE EXPENSE PARTICIPANTS TABLE
-- Track which participants are involved in each expense
CREATE TABLE IF NOT EXISTS expense_participants (
  id bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  expense_id bigint REFERENCES expenses(id) ON DELETE CASCADE NOT NULL,
  participant_user_id uuid REFERENCES auth.users(id) ON DELETE CASCADE NOT NULL,
  created_at timestamptz DEFAULT now(),
  -- Ensure each participant is only listed once per expense
  UNIQUE(expense_id, participant_user_id)
);

-- Enable Row Level Security
ALTER TABLE expense_participants ENABLE ROW LEVEL SECURITY;

-- 5. CREATE RLS POLICIES FOR NEW TABLES

-- Expense Participants Policies
-- Users can view expense participants for trips they participate in
CREATE POLICY "Users can view expense participants for their trips" ON expense_participants
  FOR SELECT USING (
    EXISTS (
      SELECT 1 FROM expenses e
      JOIN trip_participants tp ON e.trip_id = tp.trip_id
      WHERE e.id = expense_participants.expense_id
      AND tp.user_id = auth.uid()
    )
  );

-- Users can manage expense participants for expenses they created
CREATE POLICY "Users can manage expense participants for their expenses" ON expense_participants
  FOR ALL USING (
    EXISTS (
      SELECT 1 FROM expenses e
      WHERE e.id = expense_participants.expense_id
      AND e.user_id = auth.uid()
    )
  );

-- Admins can manage all expense participants for their trips
CREATE POLICY "Admins can manage all expense participants for their trips" ON expense_participants
  FOR ALL USING (
    EXISTS (
      SELECT 1 FROM expenses e
      JOIN trip_participants tp ON e.trip_id = tp.trip_id
      WHERE e.id = expense_participants.expense_id
      AND tp.user_id = auth.uid()
      AND tp.role = 'admin'
    )
  );

-- 6. UPDATE EXISTING RLS POLICIES FOR EXPENSES
-- Drop existing policies if they exist
DROP POLICY IF EXISTS "Users can view expenses for their trips" ON expenses;
DROP POLICY IF EXISTS "Users can manage their own expenses" ON expenses;
DROP POLICY IF EXISTS "Admins can manage all expenses for their trips" ON expenses;

-- Recreate with updated logic
CREATE POLICY "Users can view expenses for their trips" ON expenses
  FOR SELECT USING (
    EXISTS (
      SELECT 1 FROM trip_participants tp
      WHERE tp.trip_id = expenses.trip_id
      AND tp.user_id = auth.uid()
    )
  );

CREATE POLICY "Users can manage their own expenses" ON expenses
  FOR ALL USING (user_id = auth.uid());

CREATE POLICY "Admins can manage all expenses for their trips" ON expenses
  FOR ALL USING (
    EXISTS (
      SELECT 1 FROM trip_participants tp
      WHERE tp.trip_id = expenses.trip_id
      AND tp.user_id = auth.uid()
      AND tp.role = 'admin'
    )
  );

-- 7. CREATE FUNCTION FOR CURRENCY CONVERSION
-- This function will be used to convert currencies using exchange rates
CREATE OR REPLACE FUNCTION convert_currency(
  original_amount decimal(10,2),
  from_currency text,
  to_currency text,
  exchange_rate decimal(10,6)
) RETURNS decimal(10,2) AS $$
BEGIN
  -- If currencies are the same, return original amount
  IF from_currency = to_currency THEN
    RETURN original_amount;
  END IF;
  
  -- Convert using the provided exchange rate
  RETURN ROUND(original_amount * exchange_rate, 2);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

-- 8. CREATE VIEW FOR EXPENSE SUMMARY WITH PARTICIPANTS
-- This view will make it easier to query expenses with participant information
CREATE OR REPLACE VIEW expense_summary AS
SELECT 
  e.*,
  ec.name as category_name,
  ec.color as category_color,
  ec.icon as category_icon,
  t.main_currency,
  COALESCE(
    ARRAY_AGG(
      json_build_object(
        'user_id', ep.participant_user_id,
        'full_name', p.full_name
      ) ORDER BY p.full_name
    ) FILTER (WHERE ep.participant_user_id IS NOT NULL),
    ARRAY[]::json[]
  ) as participants
FROM expenses e
LEFT JOIN expense_categories ec ON e.category_id = ec.id
LEFT JOIN trips t ON e.trip_id = t.id
LEFT JOIN expense_participants ep ON e.id = ep.expense_id
LEFT JOIN profiles p ON ep.participant_user_id = p.id
GROUP BY e.id, ec.name, ec.color, ec.icon, t.main_currency;

-- 9. CLEAN UP UNUSED REFERENCES
-- Update expense_categories to remove budget-specific descriptions if any
UPDATE expense_categories 
SET description = CASE 
  WHEN description LIKE '%budget%' THEN NULL 
  ELSE description 
END;

-- 10. CREATE INDEXES FOR PERFORMANCE
CREATE INDEX IF NOT EXISTS idx_expense_participants_expense_id ON expense_participants(expense_id);
CREATE INDEX IF NOT EXISTS idx_expense_participants_user_id ON expense_participants(participant_user_id);
CREATE INDEX IF NOT EXISTS idx_expenses_payment_status ON expenses(payment_status);
CREATE INDEX IF NOT EXISTS idx_expenses_original_currency ON expenses(original_currency);
CREATE INDEX IF NOT EXISTS idx_trips_main_currency ON trips(main_currency);

-- End of script
