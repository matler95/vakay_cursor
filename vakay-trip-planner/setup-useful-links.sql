-- Useful Links Table for Vakay Trip Planner

-- 1. USEFUL_LINKS TABLE
-- Stores useful links like restaurants, POIs, etc. for trips
CREATE TABLE useful_links (
  id bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  trip_id uuid REFERENCES trips(id) ON DELETE CASCADE NOT NULL,
  title text NOT NULL,
  url text NOT NULL,
  description text,
  category text NOT NULL CHECK (category IN ('restaurant', 'poi', 'activity', 'shopping', 'transport', 'other')),
  address text,
  phone text,
  notes text,
  is_favorite boolean DEFAULT false,
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now()
);

-- Enable Row Level Security
ALTER TABLE useful_links ENABLE ROW LEVEL SECURITY;

-- 2. Create indexes for better performance
CREATE INDEX idx_useful_links_trip_id ON useful_links(trip_id);
CREATE INDEX idx_useful_links_category ON useful_links(category);
CREATE INDEX idx_useful_links_favorite ON useful_links(is_favorite);

-- 3. Add RLS policies for useful_links
CREATE POLICY "Users can view useful links for trips they participate in" ON useful_links
  FOR SELECT USING (
    EXISTS (
      SELECT 1 FROM trip_participants tp
      WHERE tp.trip_id = useful_links.trip_id
      AND tp.user_id = auth.uid()
    )
  );

CREATE POLICY "Users can insert useful links for trips they participate in" ON useful_links
  FOR INSERT WITH CHECK (
    EXISTS (
      SELECT 1 FROM trip_participants tp
      WHERE tp.trip_id = useful_links.trip_id
      AND tp.user_id = auth.uid()
    )
  );

CREATE POLICY "Users can update useful links for trips they participate in" ON useful_links
  FOR UPDATE USING (
    EXISTS (
      SELECT 1 FROM trip_participants tp
      WHERE tp.trip_id = useful_links.trip_id
      AND tp.user_id = auth.uid()
    )
  );

CREATE POLICY "Users can delete useful links for trips they participate in" ON useful_links
  FOR DELETE USING (
    EXISTS (
      SELECT 1 FROM trip_participants tp
      WHERE tp.trip_id = useful_links.trip_id
      AND tp.user_id = auth.uid()
    )
  );

-- 4. Create updated_at trigger
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = now();
    RETURN NEW;
END;
$$ language 'plpgsql';

CREATE TRIGGER update_useful_links_updated_at 
    BEFORE UPDATE ON useful_links 
    FOR EACH ROW 
    EXECUTE FUNCTION update_updated_at_column();
