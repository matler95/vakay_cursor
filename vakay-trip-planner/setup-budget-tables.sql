-- Setup Budget Tracking Tables
-- Run this script in your Supabase SQL editor

-- 1. Create expense categories table
CREATE TABLE IF NOT EXISTS expense_categories (
  id bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  name text NOT NULL UNIQUE,
  icon text NOT NULL,
  color text NOT NULL,
  description text
);

-- Enable Row Level Security
ALTER TABLE expense_categories ENABLE ROW LEVEL SECURITY;

-- 2. Create expenses table
CREATE TABLE IF NOT EXISTS expenses (
  id bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  trip_id uuid REFERENCES trips(id) ON DELETE CASCADE NOT NULL,
  user_id uuid REFERENCES auth.users(id) ON DELETE CASCADE NOT NULL,
  category_id bigint REFERENCES expense_categories(id) ON DELETE SET NULL,
  date date NOT NULL,
  amount decimal(10,2) NOT NULL CHECK (amount > 0),
  currency text NOT NULL DEFAULT 'USD',
  description text NOT NULL,
  location text,
  notes text,
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now()
);

-- Enable Row Level Security
ALTER TABLE expenses ENABLE ROW LEVEL SECURITY;

-- 3. Create budgets table
CREATE TABLE IF NOT EXISTS budgets (
  id bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  trip_id uuid REFERENCES trips(id) ON DELETE CASCADE NOT NULL,
  category_id bigint REFERENCES expense_categories(id) ON DELETE CASCADE,
  amount decimal(10,2) NOT NULL CHECK (amount > 0),
  currency text NOT NULL DEFAULT 'USD',
  created_at timestamptz DEFAULT now(),
  -- Ensure only one budget per category per trip
  UNIQUE (trip_id, category_id)
);

-- Enable Row Level Security
ALTER TABLE budgets ENABLE ROW LEVEL SECURITY;

-- 4. Insert default expense categories
INSERT INTO expense_categories (name, icon, color, description) VALUES
  ('Accommodation', 'üè®', '#3B82F6', 'Hotels, hostels, vacation rentals'),
  ('Food & Dining', 'üçΩÔ∏è', '#10B981', 'Restaurants, cafes, groceries'),
  ('Transportation', 'üöó', '#F59E0B', 'Flights, trains, buses, taxis, car rentals'),
  ('Activities', 'üéØ', '#8B5CF6', 'Tours, attractions, entertainment'),
  ('Shopping', 'üõçÔ∏è', '#EC4899', 'Souvenirs, clothes, gifts'),
  ('Health & Medical', 'üè•', '#EF4444', 'Medical expenses, insurance'),
  ('Communication', 'üì±', '#06B6D4', 'Phone, internet, SIM cards'),
  ('Other', 'üìù', '#6B7280', 'Miscellaneous expenses')
ON CONFLICT (name) DO NOTHING;

-- 5. Set up Row Level Security policies for expense_categories
CREATE POLICY "Allow all users to view expense categories" ON expense_categories
  FOR SELECT USING (true);

-- 6. Set up Row Level Security policies for expenses
CREATE POLICY "Users can view expenses for trips they participate in" ON expenses
  FOR SELECT USING (
    EXISTS (
      SELECT 1 FROM trip_participants 
      WHERE trip_participants.trip_id = expenses.trip_id 
      AND trip_participants.user_id = auth.uid()
    )
  );

CREATE POLICY "Users can insert expenses for trips they participate in" ON expenses
  FOR INSERT WITH CHECK (
    EXISTS (
      SELECT 1 FROM trip_participants 
      WHERE trip_participants.trip_id = expenses.trip_id 
      AND trip_participants.user_id = auth.uid()
    )
    AND expenses.user_id = auth.uid()
  );

CREATE POLICY "Users can update their own expenses or if they are admin" ON expenses
  FOR UPDATE USING (
    expenses.user_id = auth.uid() OR
    EXISTS (
      SELECT 1 FROM trip_participants 
      WHERE trip_participants.trip_id = expenses.trip_id 
      AND trip_participants.user_id = auth.uid()
      AND trip_participants.role = 'admin'
    )
  );

CREATE POLICY "Users can delete their own expenses or if they are admin" ON expenses
  FOR DELETE USING (
    expenses.user_id = auth.uid() OR
    EXISTS (
      SELECT 1 FROM trip_participants 
      WHERE trip_participants.trip_id = expenses.trip_id 
      AND trip_participants.user_id = auth.uid()
      AND trip_participants.role = 'admin'
    )
  );

-- 7. Set up Row Level Security policies for budgets
CREATE POLICY "Users can view budgets for trips they participate in" ON budgets
  FOR SELECT USING (
    EXISTS (
      SELECT 1 FROM trip_participants 
      WHERE trip_participants.trip_id = budgets.trip_id 
      AND trip_participants.user_id = auth.uid()
    )
  );

CREATE POLICY "Only admins can manage budgets" ON budgets
  FOR ALL USING (
    EXISTS (
      SELECT 1 FROM trip_participants 
      WHERE trip_participants.trip_id = budgets.trip_id 
      AND trip_participants.user_id = auth.uid()
      AND trip_participants.role = 'admin'
    )
  );
